version: '3.9'

services:
  mongo:
    image: mongo:7
    container_name: mongo_db_rodo
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - mongo_volume:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: |
        mongosh --host localhost:27017 --eval "quit(db.adminCommand('ping').ok ? 0 : 1)"
      interval: 15s
      timeout: 10s 
      retries: 10 
      start_period: 60s

  mongo-init-replica:
    image: mongo:7
    container_name: mongo_init_replica_script
    depends_on:
      mongo:
        condition: service_healthy
    command: |
      bash -c '
        echo "mongo-init-replica: MongoDB healthy. Initiating replica set rs0..."

        mongosh --norc --host mongo:27017 <<EOF
          var cfg = {
            _id: "rs0",
            members: [
              { _id: 0, host: "mongo:27017", priority: 1 }
            ]
          };
          var rs_status;
          try {
            rs_status = rs.initiate(cfg);
          } catch (e) {
            print("Błąd podczas rs.initiate(): " + e);
            if (e.message && (e.message.includes("already initialized") || e.message.includes("New replica set config object is missing an _id field") || e.message.includes("replSetReconfig"))) {
              rs_status = { ok: 1 };
            } else {
              print("Error during rs.initiate(): " + e);
              throw e;
            }
          }

          if (rs_status.ok === 1) {
            var was_just_initiated = !(rs_status.errmsg && rs_status.errmsg.includes("already initialized"));
            if (was_just_initiated) {
              sleep(5000);
            }

            var final_status = rs.status();
            if (final_status.ok === 1 && final_status.members && final_status.members.some(m => m.stateStr === "PRIMARY")) {
              print("SUCCESS: PRIMARY member znaleziony. Inicjalizacja zakończona pomyślnie.");
            } else {
              printjson(final_status);
              throw "PRIMARY not found or rs.status() not ok after initiation.";
            }
          } else {
            printjson(rs_status);
            throw "rs.initiate() failed.";
          }
        EOF
      '
    restart: "no"

  api:
    build: .
    container_name: fastapi_rodo
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init-replica:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    environment:
      MONGODB_URL: "mongodb://mongo:27017/tioch?replicaSet=rs0"
      DATABASE_NAME: "tioch"
      CONVERSION_SERVICE_URL: "http://extractor:8000/file"
      DETECTION_SERVICE_URL: "http://detector-api:8000/detect"
      NOTIFICATION_SERVICE_URL: "http://notifications:8765/api/send-notification"
      PYTHONUNBUFFERED: 1
    volumes:
      - ./app:/app/app

volumes:
  mongo_volume: